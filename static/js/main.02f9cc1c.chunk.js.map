{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","util.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onMovieAdd","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","hasError","setHasError","_useState5","_useState6","setMovie","_useState7","_useState8","query","setQuery","_Fragment","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","onClick","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","toLowerCase","trim","response","movieData","Title","Plot","Poster","imdbID","error","errorMessage","finally","disabled","App","some","someMovie","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02f9cc1c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState, MouseEvent, ChangeEvent } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { parseData } from '../../util';\nimport { MovieData } from '../../types/MovieData';\n\ntype Props = {\n  onMovieAdd: (movie: Movie | null) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onMovieAdd }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setHasError(false);\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    getMovie(query.toLowerCase().trim())\n      .then(response => {\n        if ('Error' in response) {\n          setHasError(true);\n        } else {\n          setMovie(parseData(response as MovieData));\n        }\n      })\n      .catch(error => {\n        setHasError(true);\n        throw new Error(error.errorMessage);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleMovieAdd = () => {\n    onMovieAdd(movie);\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': hasError,\n              })}\n              value={query}\n              onChange={handleQueryChange}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              onClick={handleSubmit}\n              disabled={!query}\n            >\n              {movie ? (\n                'Search again'\n              ) : (\n                'Find a movie'\n              )}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleMovieAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=3ba730e2';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\n\nexport function parseData(movieData: MovieData): Movie {\n  const DEFAULT_PICTURE_URL\n    = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  return ({\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster === 'N/A' ? DEFAULT_PICTURE_URL : movieData.Poster,\n    imdbId: movieData.imdbID,\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n  });\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovie] = useState<Movie[]>([]);\n\n  const handleMovieAdd = (movie: Movie | null) => {\n    if (movie && !movies.some(someMovie => someMovie.imdbId === movie.imdbId)) {\n      setMovie(prev => [...prev, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onMovieAdd={handleMovieAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}